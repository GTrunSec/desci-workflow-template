[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "workflow-template",
    "section": "",
    "text": "Getting Started"
  },
  {
    "objectID": "spiffworkflow.html#spiffworkflow",
    "href": "spiffworkflow.html#spiffworkflow",
    "title": "spiffworkflow",
    "section": "SpiffWorkflow",
    "text": "SpiffWorkflow"
  },
  {
    "objectID": "spiffworkflow-cli.html",
    "href": "spiffworkflow-cli.html",
    "title": "1  spiffworkflow-cli",
    "section": "",
    "text": "tags\n\n[spiffworkflow]()\n\n\n\n\n\nCode\nusing Kroki\n\n\n\n\nCode\nDiagram(\n  :bpmn;\n  path = joinpath(@__DIR__, \"example.bpmn\"),\n)"
  },
  {
    "objectID": "prefect.html#prefect-dot-io",
    "href": "prefect.html#prefect-dot-io",
    "title": "prefect",
    "section": "Prefect.io",
    "text": "Prefect.io"
  },
  {
    "objectID": "prefect-examples.html#sequential-execution",
    "href": "prefect-examples.html#sequential-execution",
    "title": "2  prefect examples",
    "section": "2.1 Sequential execution",
    "text": "2.1 Sequential execution\n\n\nCode\npython ../../jobs/prefect/sequential.py\n\n\n/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/lib/python3.10/contextlib.py:142: SAWarning: Skipped unsupported reflection of expression-based index ix_flow_run__coalesce_start_time_expected_start_time_desc\n\n\n  next(self.gen)\n\n\n/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/lib/python3.10/contextlib.py:142: SAWarning: Skipped unsupported reflection of expression-based index ix_flow_run__coalesce_start_time_expected_start_time_asc\n\n\n  next(self.gen)\n\n\n22:57:55.541 | INFO    | prefect.engine - Created flow run 'amiable-nautilus' for flow 'my-flow'\n\n\n22:57:55.669 | INFO    | Flow run 'amiable-nautilus' - Created task run 'print_values-0' for task 'print_values'\n\n\n22:57:55.670 | INFO    | Flow run 'amiable-nautilus' - Executing 'print_values-0' immediately...\n\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA22:58:03.239 | INFO    | Task run 'print_values-0' - Finished in state Completed()\n\n\n22:58:03.260 | INFO    | Flow run 'amiable-nautilus' - Created task run 'print_values-1' for task 'print_values'\n\n\n22:58:03.261 | INFO    | Flow run 'amiable-nautilus' - Executing 'print_values-1' immediately...\n\n\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB22:58:08.322 | INFO    | Task run 'print_values-1' - Finished in state Completed()\n\n\n22:58:08.344 | INFO    | Flow run 'amiable-nautilus' - Finished in state Completed('All states completed.')"
  },
  {
    "objectID": "python.html#poetry",
    "href": "python.html#poetry",
    "title": "python",
    "section": "Poetry",
    "text": "Poetry\n\nCLI\n\nrun poetry install with full dependencies\nhttps://python-poetry.org/docs/cli/\n\n\npoetry install --with data\n\nonly groups\n\n\npoetry install --only data,jupyenv\n\nthen poetry shell to enter the python virtualEnvironment\n\n\n\nconfigFiles\n\nDont not modify the top-level/pyproject.toml, which is generated by nix automaticlly.\n\n\nadd your custom poetry packages\ncustom dir: ./nix/python/packages/\npoetry add --group data -C ./nix/python/packages/\n\n\n\nmerge the pyproject.toml from other poetry’s projects\nNotice: make sure the pyproject.toml under the path vaule.\n\n\n{\n  poetry =\n    l.recursiveUpdate (cell.lib.mergePoetryEnv [\n      {\n        path = ./packages;\n      }\n      {\n        path = \"${inputs.dataflow2nix}/nix/prefect/packages\";\n        overrides = false;\n      }\n      {path = \"${inputs.desci}/nix/python/packages\";}\n    ]) {\n      # add your overrides here\n      #  pyproject = {\n      #  tool.poetry.dependencies.polars = {\n      #   version = \"^0.15.1\";\n      #   format = \"wheel\";\n      # };\n      # };\n    };\n}"
  },
  {
    "objectID": "python.html#nix",
    "href": "python.html#nix",
    "title": "python",
    "section": "Nix",
    "text": "Nix\n\nstd\n\n\nstd //python/packages/default:build\n\nnix-command\n\n\nnix build .x86_64-linux.python.packages.default --print-build-logs"
  },
  {
    "objectID": "prefect-tasks.html#sequential-execution",
    "href": "prefect-tasks.html#sequential-execution",
    "title": "3  prefect tasks",
    "section": "3.1 Sequential execution",
    "text": "3.1 Sequential execution\n\n\nCode\nimport time\nfrom prefect import task, flow\nfrom prefect.task_runners import SequentialTaskRunner\n\n@task\ndef print_values(values):\n    for value in values:\n        time.sleep(0.5)\n        print(value, end=\"\\r\")\n\n@flow(task_runner=SequentialTaskRunner())\ndef my_flow():\n    print_values.submit([\"AAAA\"] * 15)\n    print_values.submit([\"BBBB\"] * 10)\n\nif __name__ == \"__main__\":\n    my_flow()\n\n\n22:58:15.056 | INFO    | prefect.engine - Created flow run 'wisteria-jacamar' for flow 'my-flow'\n\n\n\n22:58:15.199 | INFO    | Flow run 'wisteria-jacamar' - Created task run 'print_values-0' for task 'print_values'\n\n\n\n22:58:15.201 | INFO    | Flow run 'wisteria-jacamar' - Executing 'print_values-0' immediately...\n\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\nAAAA\n\n\n22:58:22.775 | INFO    | Task run 'print_values-0' - Finished in state Completed()\n\n\n\n22:58:22.798 | INFO    | Flow run 'wisteria-jacamar' - Created task run 'print_values-1' for task 'print_values'\n\n\n\n22:58:22.800 | INFO    | Flow run 'wisteria-jacamar' - Executing 'print_values-1' immediately...\n\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\nBBBB\n\n\n22:58:27.864 | INFO    | Task run 'print_values-1' - Finished in state Completed()\n\n\n\n22:58:27.889 | INFO    | Flow run 'wisteria-jacamar' - Finished in state Completed('All states completed.')"
  }
]