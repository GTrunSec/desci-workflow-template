:PROPERTIES:
:ID:       bb8c2d1a-cfc1-414a-a789-c91c345e8af0
:END:
#+TITLE: python
#+AUTHOR: GuangTao Zhang
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2023-02-20 Mon 20:28



* Poetry
** cli
- run *poetry install* with full dependencies
- https://python-poetry.org/docs/cli/

#+begin_src sh :async :exports both :results output
poetry install --with data
#+end_src

#+begin_src sh :async :exports both :results output
poetry install --only data,jupyenv
#+end_src

- then ~poetry shell~ to enter the python virtualEnvironment

** configFiles

#+begin_quote
Dont not modify the top-level/pyproject.toml, which is generated by nix automaticlly.
#+end_quote

- add your custom poetry packages

  custom dir: ~./nix/python/packages/~

  #+begin_src sh :async :exports both :results output
poetry add --group data -C ./nix/python/packages/
  #+end_src


- merge the pyproject.toml from other poetry's projects

  *Notice*: make sure the ~pyproject.toml~ under the path vaule.

#+begin_src nix :exports both :results output
{
  poetry =
    l.recursiveUpdate (cell.lib.mergePoetryEnv [
      {
        path = ./packages;
      }
      {
        path = "${inputs.dataflow2nix}/nix/prefect/packages";
        overrides = false;
      }
      {path = "${inputs.desci}/nix/python/packages";}
    ]) {
      # add your overrides here
      #  pyproject = {
      #  tool.poetry.dependencies.polars = {
      #   version = "^0.15.1";
      #   format = "wheel";
      # };
      # };
    };
}
#+end_src


* Nix

- std
#+begin_src sh :async :exports both :results output
std //python/packages/default:build
#+end_src

- nix-command

  #+begin_src sh :async :exports both :results output
nix build .x86_64-linux.python.packages.default --print-build-logs
  #+end_src
